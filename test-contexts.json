{
  "validContexts": [
    {
      "id": "text-simple",
      "content": "This is a simple text context for testing basic functionality.",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "simple",
        "tags": ["basic", "text"]
      }
    },
    {
      "id": "text-complex",
      "content": "This is a more complex text context that includes various elements like numbers (123), special characters (!@#$%), and unicode characters (üöÄ ‰Ω†Â•Ω). It's designed to test how the system handles diverse content while remaining within reasonable limits.",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "complex",
        "tags": ["complex", "text", "unicode"],
        "length": 234,
        "hasSpecialChars": true,
        "hasUnicode": true
      }
    },
    {
      "id": "json-simple",
      "content": "{\n  \"message\": \"Hello, world!\",\n  \"timestamp\": \"2024-01-01T00:00:00Z\",\n  \"data\": {\n    \"key\": \"value\",\n    \"number\": 42\n  }\n}",
      "type": "json",
      "metadata": {
        "source": "fixture",
        "category": "simple",
        "tags": ["basic", "json"],
        "format": "json",
        "validated": true
      }
    },
    {
      "id": "json-complex",
      "content": "{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\",\n      \"email\": \"john@example.com\",\n      \"preferences\": {\n        \"theme\": \"dark\",\n        \"notifications\": true,\n        \"languages\": [\"en\", \"es\"]\n      }\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Smith\",\n      \"email\": \"jane@example.com\",\n      \"preferences\": {\n        \"theme\": \"light\",\n        \"notifications\": false,\n        \"languages\": [\"en\", \"fr\"]\n      }\n    }\n  ],\n  \"metadata\": {\n    \"total\": 2,\n    \"page\": 1,\n    \"hasMore\": false\n  }\n}",
      "type": "json",
      "metadata": {
        "source": "fixture",
        "category": "complex",
        "tags": ["complex", "json", "nested"],
        "format": "json",
        "structure": "array-with-objects"
      }
    },
    {
      "id": "code-javascript",
      "content": "function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\n// Example usage\nconst result = fibonacci(10);\nconsole.log(`Fibonacci(10) = ${result}`);\n\n// More complex example with memoization\nfunction fibonacciMemo(n, memo = {}) {\n  if (n in memo) return memo[n];\n  if (n <= 1) return n;\n  \n  memo[n] = fibonacciMemo(n - 1, memo) + fibonacciMemo(n - 2, memo);\n  return memo[n];\n}",
      "type": "code",
      "metadata": {
        "source": "fixture",
        "category": "algorithm",
        "tags": ["code", "javascript", "algorithm"],
        "language": "javascript",
        "complexity": "medium",
        "features": ["recursion", "memoization"]
      }
    },
    {
      "id": "code-python",
      "content": "import asyncio\nimport aiohttp\nfrom typing import List, Dict, Any\n\nclass APIClient:\n    def __init__(self, base_url: str):\n        self.base_url = base_url\n        self.session = None\n    \n    async def __aenter__(self):\n        self.session = aiohttp.ClientSession()\n        return self\n    \n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        if self.session:\n            await self.session.close()\n    \n    async def fetch_data(self, endpoint: str) -> Dict[str, Any]:\n        if not self.session:\n            raise RuntimeError(\"Client not initialized\")\n        \n        url = f\"{self.base_url}/{endpoint}\"\n        async with self.session.get(url) as response:\n            response.raise_for_status()\n            return await response.json()\n\n# Usage example\nasync def main():\n    async with APIClient(\"https://api.example.com\") as client:\n        data = await client.fetch_data(\"users\")\n        print(f\"Fetched {len(data)} users\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())",
      "type": "code",
      "metadata": {
        "source": "fixture",
        "category": "api-client",
        "tags": ["code", "python", "async", "http"],
        "language": "python",
        "complexity": "high",
        "features": ["async", "context-manager", "type-hints", "error-handling"]
      }
    }
  ],
  "invalidContexts": [
    {
      "id": "empty-content",
      "content": "",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "invalid",
        "reason": "empty-content"
      },
      "expectedError": "Content is required"
    },
    {
      "id": "whitespace-only",
      "content": "   \n\t   ",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "invalid",
        "reason": "whitespace-only"
      },
      "expectedError": "Content is required"
    },
    {
      "id": "oversized-content",
      "content": "A",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "invalid",
        "reason": "oversized",
        "note": "Content will be repeated to exceed limit"
      },
      "expectedError": "exceeds maximum length",
      "generateOversized": true
    },
    {
      "id": "invalid-type",
      "content": "Valid content with invalid type",
      "type": "invalid-type",
      "metadata": {
        "source": "fixture",
        "category": "invalid",
        "reason": "invalid-type"
      },
      "expectedError": "Invalid content type"
    }
  ],
  "edgeCases": [
    {
      "id": "unicode-mixed",
      "content": "Mixed content: English, ‰∏≠Êñá, ÿßŸÑÿπÿ±ÿ®Ÿäÿ©, —Ä—É—Å—Å–∫–∏–π, üåçüöÄüíª",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "edge-case",
        "tags": ["unicode", "multilingual", "emoji"]
      }
    },
    {
      "id": "special-characters",
      "content": "Special chars: !@#$%^&*()_+-=[]{}|;':\",./<>?`~\\",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "edge-case",
        "tags": ["special-characters", "symbols"]
      }
    },
    {
      "id": "html-like",
      "content": "<div class=\"test\">HTML-like content with <script>alert('test')</script> and <img src=\"x\" onerror=\"alert(1)\"> tags</div>",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "edge-case",
        "tags": ["html-like", "security-test"],
        "securityNote": "Tests XSS prevention"
      }
    },
    {
      "id": "sql-like",
      "content": "SELECT * FROM users WHERE id = 1; DROP TABLE users; -- Comment",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "edge-case",
        "tags": ["sql-like", "security-test"],
        "securityNote": "Tests SQL injection prevention"
      }
    },
    {
      "id": "very-long-line",
      "content": "This is a very long line without any line breaks that goes on and on and on to test how the system handles content with extremely long lines that might cause display or processing issues in various parts of the application and to ensure that the system can handle such content gracefully without breaking or causing performance problems.",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "edge-case",
        "tags": ["long-line", "performance"],
        "lineLength": 456
      }
    },
    {
      "id": "many-lines",
      "content": "Line 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\nLine 11\nLine 12\nLine 13\nLine 14\nLine 15\nLine 16\nLine 17\nLine 18\nLine 19\nLine 20",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "edge-case",
        "tags": ["many-lines", "formatting"],
        "lineCount": 20
      }
    },
    {
      "id": "mixed-whitespace",
      "content": "Text\twith\r\nvarious\u00A0types\u2000of\u2003whitespace\u2009characters",
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "edge-case",
        "tags": ["whitespace", "formatting"],
        "whitespaceTypes": ["tab", "crlf", "nbsp", "en-space", "em-space", "thin-space"]
      }
    }
  ],
  "performanceTests": [
    {
      "id": "small-content",
      "size": 100,
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "performance",
        "size": "small"
      }
    },
    {
      "id": "medium-content",
      "size": 1000,
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "performance",
        "size": "medium"
      }
    },
    {
      "id": "large-content",
      "size": 5000,
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "performance",
        "size": "large"
      }
    },
    {
      "id": "max-content",
      "size": 9999,
      "type": "text",
      "metadata": {
        "source": "fixture",
        "category": "performance",
        "size": "maximum"
      }
    }
  ]
}

