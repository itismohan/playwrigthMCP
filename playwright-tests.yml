name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_tags:
        description: 'Test tags to run (e.g., @smoke, @regression)'
        required: false
        default: '@smoke'
      browser:
        description: 'Browser to test'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [api-tests, chromium-ui, firefox-ui, webkit-ui]
        include:
          - project: api-tests
            name: "API Tests"
            tags: "@api"
          - project: chromium-ui
            name: "UI Tests (Chromium)"
            tags: "@ui"
          - project: firefox-ui
            name: "UI Tests (Firefox)"
            tags: "@ui"
          - project: webkit-ui
            name: "UI Tests (WebKit)"
            tags: "@ui"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Start mock server
      run: |
        npm run start:mock-server &
        sleep 5
        curl -f http://localhost:3001/api/health || exit 1
      env:
        MOCK_SERVER_PORT: 3001

    - name: Run Playwright tests
      run: |
        if [ "${{ github.event.inputs.test_tags }}" != "" ]; then
          npx playwright test --project=${{ matrix.project }} --grep="${{ github.event.inputs.test_tags }}"
        elif [ "${{ matrix.project }}" = "api-tests" ]; then
          npx playwright test --project=api-tests
        else
          npx playwright test --project=${{ matrix.project }}
        fi
      env:
        CI: true
        BASE_URL: http://localhost:3001
        API_BASE_URL: http://localhost:3001/api
        HEADLESS: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-results-${{ matrix.project }}
        path: |
          test-results/
          playwright-report/
        retention-days: 30

    - name: Upload test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report-${{ matrix.project }}
        path: playwright-report/
        retention-days: 30

  smoke-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install chromium

    - name: Start mock server
      run: |
        npm run start:mock-server &
        sleep 5
        curl -f http://localhost:3001/api/health || exit 1
      env:
        MOCK_SERVER_PORT: 3001

    - name: Run smoke tests
      run: npx playwright test --grep="@smoke"
      env:
        CI: true
        BASE_URL: http://localhost:3001
        API_BASE_URL: http://localhost:3001/api
        HEADLESS: true

    - name: Upload smoke test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: smoke-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  regression-tests:
    timeout-minutes: 90
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Start mock server
      run: |
        npm run start:mock-server &
        sleep 5
        curl -f http://localhost:3001/api/health || exit 1
      env:
        MOCK_SERVER_PORT: 3001

    - name: Run regression tests
      run: npx playwright test --grep="@regression"
      env:
        CI: true
        BASE_URL: http://localhost:3001
        API_BASE_URL: http://localhost:3001/api
        HEADLESS: true

    - name: Upload regression test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: regression-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  performance-tests:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install chromium

    - name: Start mock server
      run: |
        npm run start:mock-server &
        sleep 5
        curl -f http://localhost:3001/api/health || exit 1
      env:
        MOCK_SERVER_PORT: 3001

    - name: Run performance tests
      run: npx playwright test --grep="@performance"
      env:
        CI: true
        BASE_URL: http://localhost:3001
        API_BASE_URL: http://localhost:3001/api
        HEADLESS: true

    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  report-generation:
    runs-on: ubuntu-latest
    needs: [test, smoke-tests]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Generate consolidated report
      run: |
        node utils/report-generator.js
      env:
        ARTIFACTS_PATH: artifacts/

    - name: Upload consolidated report
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-test-report
        path: consolidated-report/
        retention-days: 30

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const summaryPath = path.join('consolidated-report', 'summary.json');
            if (fs.existsSync(summaryPath)) {
              const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              
              const comment = `## 🎭 Playwright Test Results
              
              **Test Summary:**
              - ✅ Passed: ${summary.passed}
              - ❌ Failed: ${summary.failed}
              - ⏭️ Skipped: ${summary.skipped}
              - 🕐 Duration: ${summary.duration}
              
              **Coverage by Tag:**
              ${Object.entries(summary.tagCoverage || {}).map(([tag, count]) => `- ${tag}: ${count} tests`).join('\n')}
              
              [View detailed report](${summary.reportUrl || 'Check artifacts'})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not post test results comment:', error);
          }

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: [test, smoke-tests]
    if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')
    steps:
    - name: Notify on test failure
      run: |
        echo "Tests failed on ${{ github.ref_name }} branch"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        # Add notification logic here (Slack, email, etc.)

